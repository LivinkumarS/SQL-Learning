Database:
-----------
>> A database is an organized collection of data.

RDBMS --> Relational Database Management System.
--------------------------------------------------
>> Stores data in Tables (Rows and Columns)
>> EX: MySQL, Oracle, PostgreSQL, Excel.

MySQL 
------
>> Open source RDBMS. (web application)

SQL---> Structured Query Language.
>> To interact with relational database. allows you to manipulate the data in RDBMS.
rules
-----
>> SQL is not case-sensitive.
>> Every Query should end with ";"

Local---> Workbench.

Schema ---> table ---> Store data

Datatype:
------------
1) Numeric DataTypes
-----------------------
INT ---> -200, 1, 45.
TINYINT --> 1 byte of data (1,2,3) -127 to 127.
SMALLINT --> 2 bytes.
BIGINT ---> 8 bytes
DECIMAL(p,s)--> Fixed Point Numbers--> DECIMAL(5,2) --> 656.67.
FLOAT --> Floating Number ---> 32.343434, 34.3434
DOUBLE ---> Large Float Numbers.

2) String DataTypes
-----------------------
CHAR(n)--> Fixed-length String. ex: CHAR(5)--> The data should have 5 characters.
VARCHAR(n)---> Variable-length. ex: VARCHAR(5) --> max length 5. 4,3.
TEXT ---> Large text field
ENUM ---> One value From alist. ex: ENUM("male","female").

3)BOOLEAN
----------
BOOLEAN ---> True or False.

4) Date and Time
-----------------
DATE --> only date (yyyy-mm-dd)
TIME --> only TIME (hh:mm:ss)
DATETIME --> store both date and time.

Operators in MySQL 
--------------------
= Equal to  
!= not Equal to 
< Lesser than
> Greater than
<= Lesser than or equal 
>= Greater than or equal

BETWEEN ---> Used to filter within a range
IN --> Used to match multiple values.

LIKE ---> Used for pattern matching in string.

% ---> any number of characters (0- infinite).
_ ---> a single characters.

LIMIT ---> Used to limit the number of records.
OFFSET ---> Used to ignore the starting records.

ORDER BY 
---------
Used to sort records in ascending or descending order.
ASC--> ascending
DESC--> descending




To combine Two Conditions
-------------------------
AND ---> if both are true--> true
OR ---> either one true --> true

NOT --> reverse the condition.



constraints
-----------
>> It is a rule set on a column to control the type of data that can be stored there.

PRIMARY KEY ---> It ensures Uniqueness and not null automatically. Only one primary key per table. That uniquly Identifies each row in a table.
FOREIGN KEY ---> It Just Links a column in a table to a primary key in another table.
UNIQUE ---> Ensures values in a column are different.
NOT NULL --> A cloumn must always have a value.
AUTO_INCREMENT ---> Automatically increases numeric values for each new row.



Queries
--------

Creating Database ---> CREATE database "dbname";

To Select a Database--> USE "dbname";

Creating Table ---> CREATE TABLE attendance(
    col1 datatype constraints,
    col2 datatype constraints,
    col3 datatype constraints,
    .
    .
    .
);

 To Insert Data in a table--> INSERT INTO "tablename" (col details) VALUES (),(),()....;

 To select data from a table ---> SELECT "col detail" FROM "tb name"; col---> *(all the columns)
 AS---> Rename the column in output.

 To filter the records ---> WHERE condition.

 To update the existing data--> UPDATE "tb name" SET col1=val1, col2=val2.... where condition; without filter, it will affect every records inside that table. you should use only PRIMARY KEY to select that record. when you are updating records without using PRIMARY KEY, then you have to turn off "SQL_SAFE_UPDATE" first.

 To Delete an existing data--> DELETE FROM "tb name" where condition;


 CRUD (Data)
 -----------
 create --> Insert
 Read --> Select
 Update --> Update
 Delete --> Delete


 ALTER table 
 ------------
 to add a new column ---> ALTER TABLE 'tb name' ADD 'col name' datatype constraints.
 add constraint (only works to add foreign or primary key) --> ALTER TABLE 'tb name' ADD CONSTRAINT 


Functions:
---------------
>> built in methods used to process or format data directly in queries.

Numeric Functions
-------------------
ROUND(number, decimal place) ---> Round the number to specified decimals. Ex: ROUND(12.3456) ---> 12, ROUND(67.56,1) --> 67.6
CEIL(number) ---> Round up the number. CEIL(12.000001) ---> 13
FLOOR(number) ---> Round down the number. FLOOR(12.9999999) ---> 12
ABS()--> the absolute value (removes the sign). ex: ABS(5)--> 5. ABS(-10) --> 10
MOD(divident, divisor)--> return reminder. ex: MOD(34,3) ---> 1. 299/10-->9. 45/6-->3.
POW(base, exponent)---> POW(2,2)--> 4, POW(9,2) ---> 81.

String Functions
-------------------
CONCAT(str1, str2, str3.....)---> CONCAT("I","would","love","to","code")---> "Iwouldlovetocode".
LENGTH(str1) ---> return number of characters.
UPPER(str1)---> converts string into uppercase.
LOWER(str1)---> converts string into lowercase.
SUBSTRING(str1, start, length) ---> Extracts a part of string. ex: SUBSTRING("Hello",1,3) ---> "Hel"
TRIM(str) --> used to remove space at begenning and ending.ex: trim("   hello world    ")-->"hello world"

Date and Time Functions
-------------------------
NOW()--> return both date and time.
CURDATE()--> return only date. yyyy-mm-dd
CURTIME()--> return only time.hh:mm:ss
DATEDIFF(date1, date2) --> difference in days. Ex: DATEDIFF('2025-02-01','2025-01-01')



Joins:
--------
>> Used to combine data from two or more tables based on related column between them.

INNER JOIN:
------------
>> Returns rows where There is a match in both tables.
 INNER JOIN "tb2name" on t1.col1=t2.col2;

LEFT JOIN:
---------
>> Returns all rows from left table + matched rows from Right table
LEFT JOIN "tb2name" on t1.col1=t2.col2;

RIGHT JOIN:
-----------
>> Returns all rows from right table + matched rows from left table
RIGHT JOIN "tb2name" on t1.col1=t2.col2;



Aggregation and Grouping
------------------------
>> Combining Rows of data and producing a single summary value.

Functions:
-----------
COUNT() --> Count Number of Rows.
SUM() --> Total sum of a column
AVG() --> Average of a column.
MIN()  --> Mininum value of a column
MAX() --> Max value from a column

Group By 
---------
>> Groups rows with same values.

GROUP BY "col name"
Having condition.